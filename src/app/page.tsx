"use client";

import { useState, useEffect, useCallback, useRef } from "react";
import QRCode from "qrcode";
import { QRCodeSVG } from "qrcode.react";
import jsPDF from "jspdf";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Slider } from "@/components/ui/slider";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { toast } from "sonner";

import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  Download,
  QrCode,
  Settings,
  Palette,
  FileText,
  Image,
  Sparkles,
  Zap,
  Star,
  Heart,
} from "lucide-react";

interface QROptions {
  text: string;
  size: number;
  margin: number;
  errorCorrectionLevel: "L" | "M" | "Q" | "H";
  foreground: string;
  background: string;
  format: "png" | "jpeg" | "webp";
  logoUrl?: string;
}

export default function QRCodePDFDownloader() {
  const [qrOptions, setQROptions] = useState<QROptions>({
    text: "",
    size: 512,
    margin: 4,
    errorCorrectionLevel: "M",
    foreground: "#000000",
    background: "#ffffff",
    format: "png",
  });

  const [qrDataUrl, setQrDataUrl] = useState<string>("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [downloadProgress, setDownloadProgress] = useState(0);
  const [previewMode, setPreviewMode] = useState(true);
  const qrRef = useRef<HTMLDivElement>(null);

  const generateQRCode = useCallback(async () => {
    if (!qrOptions.text.trim()) {
      toast.error("Please enter text to generate QR code");
      return;
    }

    setIsGenerating(true);
    setDownloadProgress(0);

    try {
      // Simulate progress for better UX
      const progressInterval = setInterval(() => {
        setDownloadProgress((prev) => Math.min(prev + 10, 90));
      }, 100);

      // Generate QR code data URL for downloads using the original qrcode library
      const dataUrl = await QRCode.toDataURL(qrOptions.text, {
        width: qrOptions.size,
        margin: qrOptions.margin,
        errorCorrectionLevel: qrOptions.errorCorrectionLevel,
        color: {
          dark: qrOptions.foreground,
          light: qrOptions.background,
        },
      });

      clearInterval(progressInterval);
      setDownloadProgress(100);

      // Store data URL for downloads
      setQrDataUrl(dataUrl);
      toast.success("QR code generated successfully!");
    } catch (error) {
      toast.error("Failed to generate QR code");
      console.error("QR Code generation error:", error);
      setQrDataUrl(''); // Clear any invalid data
    } finally {
      setIsGenerating(false);
      setTimeout(() => setDownloadProgress(0), 1000);
    }
  }, [qrOptions]);

  const downloadPDF = async () => {
    if (!qrDataUrl) {
      toast.error("Please generate a QR code first");
      return;
    }

    try {
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();

      // Add title
      pdf.setFontSize(24);
      pdf.setFont("helvetica", "bold");
      pdf.text("QR Code Document", pageWidth / 2, 30, { align: "center" });

      // Add subtitle
      pdf.setFontSize(12);
      pdf.setFont("helvetica", "normal");
      pdf.text(
        `Generated on ${new Date().toLocaleDateString()}`,
        pageWidth / 2,
        45,
        { align: "center" },
      );

      // Add QR code
      const qrSize = Math.min(pageWidth - 40, pageHeight - 100);
      const qrX = (pageWidth - qrSize) / 2;
      const qrY = 60;

      pdf.addImage(qrDataUrl, "PNG", qrX, qrY, qrSize, qrSize);

      // Add encoded text below QR code
      pdf.setFontSize(10);
      pdf.text("Encoded Text:", 20, qrY + qrSize + 20);

      // Split long text into multiple lines
      const splitText = pdf.splitTextToSize(qrOptions.text, pageWidth - 40);
      pdf.text(splitText, 20, qrY + qrSize + 30);

      // Add footer
      pdf.setFontSize(8);
      pdf.text(
        "Generated by QR PDF Downloader",
        pageWidth / 2,
        pageHeight - 10,
        { align: "center" },
      );

      pdf.save(`qr-code-${Date.now()}.pdf`);
      toast.success("PDF downloaded successfully!");
    } catch (error) {
      toast.error("Failed to generate PDF");
      console.error(error);
    }
  };

  const downloadImage = () => {
    if (!qrDataUrl) {
      toast.error("Please generate a QR code first");
      return;
    }

    const link = document.createElement("a");
    link.download = `qr-code-${Date.now()}.${qrOptions.format}`;
    link.href = qrDataUrl;
    link.click();
    toast.success("Image downloaded successfully!");
  };

  const presetColors = [
    { name: "Classic", fg: "#000000", bg: "#ffffff" },
    { name: "Ocean", fg: "#0EA5E9", bg: "#F0F9FF" },
    { name: "Forest", fg: "#059669", bg: "#ECFDF5" },
    { name: "Sunset", fg: "#DC2626", bg: "#FEF2F2" },
    { name: "Purple", fg: "#7C3AED", bg: "#F3E8FF" },
    { name: "Golden", fg: "#D97706", bg: "#FFFBEB" },
  ];

  const sampleTexts = [
    "https://example.com",
    "Hello, World!",
    "mailto:contact@example.com",
    "tel:+1234567890",
    "Visit our website for more information!",
  ];

  // Auto-generate QR data URL for downloads when text changes
  useEffect(() => {
    if (qrOptions.text.trim()) {
      const debounceTimer = setTimeout(() => {
        generateQRCode();
      }, 500);
      return () => clearTimeout(debounceTimer);
    } else {
      setQrDataUrl('');
    }
  }, [qrOptions, generateQRCode]);

  return (
    <TooltipProvider>
      <div className="bg-gradient-to-br from-slate-50 via-white to-slate-100 py-4 px-4">
        <div className="max-w-7xl mx-auto space-y-8 pb-8">
          {/* Header */}
          <div className="text-center mb-8 pt-8">
            <div className="flex items-center justify-center gap-3 mb-4">
              <div className="p-3 bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl shadow-lg">
                <QrCode className="h-8 w-8 text-white" />
              </div>
              <h1 className="text-5xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                QR PDF Generator
              </h1>
              <Sparkles className="h-8 w-8 text-yellow-500" />
            </div>
            <p className="text-xl text-slate-600 max-w-2xl mx-auto">
              Create stunning QR codes and download them as beautiful PDFs with
              advanced customization options
            </p>
            <div className="flex items-center justify-center gap-2 mt-4">
              <Badge variant="secondary" className="gap-1">
                <Zap className="h-3 w-3" />
                Lightning Fast
              </Badge>
              <Badge variant="secondary" className="gap-1">
                <Star className="h-3 w-3" />
                Premium Quality
              </Badge>
              <Badge variant="secondary" className="gap-1">
                <Heart className="h-3 w-3 text-red-500" />
                Ultra Beautiful
              </Badge>
            </div>
          </div>

          <div className="grid lg:grid-cols-2 gap-8">
            {/* Left Panel - Controls */}
            <div className="space-y-6">
              <Card className="shadow-xl border-0 bg-white/80 backdrop-blur">
                <CardHeader className="pb-4">
                  <CardTitle className="flex items-center gap-2">
                    <FileText className="h-5 w-5 text-blue-600" />
                    Content & Text
                  </CardTitle>
                  <CardDescription>
                    Enter the text or URL you want to encode in your QR code
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="qr-text" className="text-sm font-medium">
                      Text to Encode
                    </Label>
                    <Textarea
                      id="qr-text"
                      placeholder="Enter text, URL, or any content..."
                      value={qrOptions.text}
                      onChange={(e) =>
                        setQROptions((prev) => ({
                          ...prev,
                          text: e.target.value,
                        }))
                      }
                      className="mt-2 min-h-[100px] resize-none"
                    />
                  </div>

                  <div>
                    <Label className="text-sm font-medium mb-2 block">
                      Quick Samples
                    </Label>
                    <div className="flex flex-wrap gap-2">
                      {sampleTexts.map((sample) => (
                        <Button
                          key={sample}
                          variant="outline"
                          size="sm"
                          onClick={() =>
                            setQROptions((prev) => ({ ...prev, text: sample }))
                          }
                          className="text-xs"
                        >
                          {sample.length > 20
                            ? `${sample.substring(0, 20)}...`
                            : sample}
                        </Button>
                      ))}
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="shadow-xl border-0 bg-white/80 backdrop-blur">
                <CardHeader className="pb-4">
                  <CardTitle className="flex items-center gap-2">
                    <Settings className="h-5 w-5 text-slate-600" />
                    Advanced Settings
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <Tabs defaultValue="appearance" className="w-full">
                    <TabsList className="grid w-full grid-cols-3">
                      <TabsTrigger
                        value="appearance"
                        className="flex items-center gap-1"
                      >
                        <Palette className="h-3 w-3" />
                        Style
                      </TabsTrigger>
                      <TabsTrigger
                        value="technical"
                        className="flex items-center gap-1"
                      >
                        <Settings className="h-3 w-3" />
                        Technical
                      </TabsTrigger>
                      <TabsTrigger
                        value="export"
                        className="flex items-center gap-1"
                      >
                        <Download className="h-3 w-3" />
                        Export
                      </TabsTrigger>
                    </TabsList>

                    <TabsContent value="appearance" className="space-y-4 mt-4">
                      <div>
                        <Label className="text-sm font-medium mb-3 block">
                          Color Presets
                        </Label>
                        <div className="grid grid-cols-3 gap-2">
                          {presetColors.map((preset) => (
                            <Tooltip key={preset.name}>
                              <TooltipTrigger asChild>
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() =>
                                    setQROptions((prev) => ({
                                      ...prev,
                                      foreground: preset.fg,
                                      background: preset.bg,
                                    }))
                                  }
                                  className="h-12 p-1"
                                >
                                  <div
                                    className="w-full h-full rounded border-2 flex items-center justify-center text-xs font-medium"
                                    style={{
                                      backgroundColor: preset.bg,
                                      color: preset.fg,
                                      borderColor: preset.fg,
                                    }}
                                  >
                                    {preset.name}
                                  </div>
                                </Button>
                              </TooltipTrigger>
                              <TooltipContent>
                                <p>{preset.name} theme</p>
                              </TooltipContent>
                            </Tooltip>
                          ))}
                        </div>
                      </div>

                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <Label
                            htmlFor="foreground"
                            className="text-sm font-medium"
                          >
                            Foreground Color
                          </Label>
                          <div className="flex gap-2 mt-2">
                            <Input
                              id="foreground"
                              type="color"
                              value={qrOptions.foreground}
                              onChange={(e) =>
                                setQROptions((prev) => ({
                                  ...prev,
                                  foreground: e.target.value,
                                }))
                              }
                              className="w-12 h-10 p-1 border rounded"
                            />
                            <Input
                              value={qrOptions.foreground}
                              onChange={(e) =>
                                setQROptions((prev) => ({
                                  ...prev,
                                  foreground: e.target.value,
                                }))
                              }
                              className="flex-1"
                              placeholder="#000000"
                            />
                          </div>
                        </div>

                        <div>
                          <Label
                            htmlFor="background"
                            className="text-sm font-medium"
                          >
                            Background Color
                          </Label>
                          <div className="flex gap-2 mt-2">
                            <Input
                              id="background"
                              type="color"
                              value={qrOptions.background}
                              onChange={(e) =>
                                setQROptions((prev) => ({
                                  ...prev,
                                  background: e.target.value,
                                }))
                              }
                              className="w-12 h-10 p-1 border rounded"
                            />
                            <Input
                              value={qrOptions.background}
                              onChange={(e) =>
                                setQROptions((prev) => ({
                                  ...prev,
                                  background: e.target.value,
                                }))
                              }
                              className="flex-1"
                              placeholder="#ffffff"
                            />
                          </div>
                        </div>
                      </div>
                    </TabsContent>

                    <TabsContent value="technical" className="space-y-4 mt-4">
                      <div>
                        <Label className="text-sm font-medium mb-2 block">
                          Size: {qrOptions.size}px
                        </Label>
                        <Slider
                          value={[qrOptions.size]}
                          onValueChange={(value) =>
                            setQROptions((prev) => ({
                              ...prev,
                              size: value[0],
                            }))
                          }
                          max={1024}
                          min={128}
                          step={32}
                          className="w-full"
                        />
                      </div>

                      <div>
                        <Label className="text-sm font-medium mb-2 block">
                          Margin: {qrOptions.margin}
                        </Label>
                        <Slider
                          value={[qrOptions.margin]}
                          onValueChange={(value) =>
                            setQROptions((prev) => ({
                              ...prev,
                              margin: value[0],
                            }))
                          }
                          max={10}
                          min={0}
                          step={1}
                          className="w-full"
                        />
                      </div>

                      <div>
                        <Label
                          htmlFor="error-correction"
                          className="text-sm font-medium"
                        >
                          Error Correction Level
                        </Label>
                        <Select
                          value={qrOptions.errorCorrectionLevel}
                          onValueChange={(value: "L" | "M" | "Q" | "H") =>
                            setQROptions((prev) => ({
                              ...prev,
                              errorCorrectionLevel: value,
                            }))
                          }
                        >
                          <SelectTrigger className="mt-2">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="L">Low (7%)</SelectItem>
                            <SelectItem value="M">Medium (15%)</SelectItem>
                            <SelectItem value="Q">Quartile (25%)</SelectItem>
                            <SelectItem value="H">High (30%)</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </TabsContent>

                    <TabsContent value="export" className="space-y-4 mt-4">
                      <div>
                        <Label htmlFor="format" className="text-sm font-medium">
                          Image Format
                        </Label>
                        <Select
                          value={qrOptions.format}
                          onValueChange={(value: "png" | "jpeg" | "webp") =>
                            setQROptions((prev) => ({ ...prev, format: value }))
                          }
                        >
                          <SelectTrigger className="mt-2">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="png">
                              PNG (Recommended)
                            </SelectItem>
                            <SelectItem value="jpeg">JPEG</SelectItem>
                            <SelectItem value="webp">WebP</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <div className="flex items-center space-x-2">
                        <Switch
                          id="preview-mode"
                          checked={previewMode}
                          onCheckedChange={setPreviewMode}
                        />
                        <Label
                          htmlFor="preview-mode"
                          className="text-sm font-medium"
                        >
                          Live Preview Mode
                        </Label>
                      </div>
                    </TabsContent>
                  </Tabs>
                </CardContent>
              </Card>
            </div>

            {/* Right Panel - Preview and Actions */}
            <div className="space-y-6">
              <Card className="shadow-xl border-0 bg-white/80 backdrop-blur">
                <CardHeader className="pb-4">
                  <CardTitle className="flex items-center gap-2">
                    <Image className="h-5 w-5 text-green-600" />
                    QR Code Preview
                  </CardTitle>
                  <CardDescription>
                    Real-time preview of your QR code
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="aspect-square bg-slate-50 rounded-lg border-2 border-dashed border-slate-200 flex items-center justify-center relative overflow-hidden">
                    {qrOptions.text.trim() ? (
                      <div className="p-4">
                        <QRCodeSVG
                          value={qrOptions.text}
                          size={Math.min(qrOptions.size, 400)}
                          bgColor={qrOptions.background}
                          fgColor={qrOptions.foreground}
                          level={qrOptions.errorCorrectionLevel}
                          marginSize={qrOptions.margin}
                          className="w-full h-full"
                        />
                      </div>
                    ) : (
                      <div className="text-center text-slate-400">
                        <QrCode className="h-16 w-16 mx-auto mb-4 opacity-50" />
                        <p className="text-lg font-medium">
                          Enter text to generate QR code
                        </p>
                        <p className="text-sm">Your QR code will appear here</p>
                      </div>
                    )}

                    {isGenerating && (
                      <div className="absolute inset-0 bg-white/90 flex items-center justify-center">
                        <div className="text-center">
                          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4" />
                          <p className="text-sm font-medium">
                            Generating QR Code...
                          </p>
                          <Progress
                            value={downloadProgress}
                            className="w-32 mt-2"
                          />
                        </div>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>

              <Card className="shadow-xl border-0 bg-white/80 backdrop-blur">
                <CardHeader className="pb-4">
                  <CardTitle className="flex items-center gap-2">
                    <Download className="h-5 w-5 text-purple-600" />
                    Download Options
                  </CardTitle>
                  <CardDescription>
                    Export your QR code in different formats
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 gap-3">
                    <Button
                      onClick={downloadPDF}
                      disabled={!qrDataUrl}
                      className="h-14 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white"
                    >
                      <FileText className="h-5 w-5 mr-2" />
                      Download as PDF
                      <Badge variant="secondary" className="ml-2">
                        Premium
                      </Badge>
                    </Button>

                    <Button
                      onClick={downloadImage}
                      disabled={!qrDataUrl}
                      variant="outline"
                      className="h-14 border-2"
                    >
                      <Image className="h-5 w-5 mr-2" />
                      Download as {qrOptions.format.toUpperCase()}
                    </Button>
                  </div>

                  {!previewMode && (
                    <Button
                      onClick={generateQRCode}
                      disabled={!qrOptions.text.trim() || isGenerating}
                      className="w-full h-12"
                      variant="secondary"
                    >
                      {isGenerating ? (
                        <>
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2" />
                          Generating...
                        </>
                      ) : (
                        <>
                          <Zap className="h-4 w-4 mr-2" />
                          Generate QR Code
                        </>
                      )}
                    </Button>
                  )}
                </CardContent>
              </Card>

              <Card className="shadow-xl border-0 bg-gradient-to-br from-slate-50 to-white">
                <CardContent className="p-6">
                  <div className="text-center text-sm text-slate-600">
                    <p className="mb-2">
                      ✨ <strong>Pro Features:</strong>
                    </p>
                    <ul className="space-y-1 text-xs">
                      <li>• High-resolution QR codes up to 1024px</li>
                      <li>• Professional PDF layouts with metadata</li>
                      <li>• Advanced error correction levels</li>
                      <li>• Custom color schemes and presets</li>
                      <li>• Real-time preview generation</li>
                    </ul>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </div>
    </TooltipProvider>
  );
}
